import java.util.regex.Pattern

apply plugin: 'com.android.library'
apply plugin: SplotInternalPlugin


class SplotInternalPlugin implements Plugin<Project> {
    static final tlExtPatt = Pattern.compile("(.*)(\\.tl)\$")
    static final luaSourcesPath = "src/main/lua"

    void apply(Project project) {
        def plugin = project.plugins.findPlugin('android')?:project.plugins.findPlugin('android-library')
        if (!plugin) {
            throw new GradleException('You must apply the Android plugin or the Android library plugin before using the SplotInternalPlugin plugin.')
        }

        // Note: the SplotPlugin adds a "splot" extension to the project
        // so we can use the same extension variables as in SplotPluginExtension

        project.android {
            sourceSets {
                main.java.srcDir(luaSourcesPath)
            }

            def variants = plugin.class.name.endsWith('.LibraryPlugin') ? libraryVariants : applicationVariants
            variants.all {
                def variantName = name
                def destDir = new File(project.buildDir, "generated/res/generated/${variantName}/raw")
                def taskName = "splotInternal${variantName.capitalize()}"

                project.task(taskName) {
                    def srcFiles = project.fileTree(luaSourcesPath).include('**/*.tl')

                    inputs.file srcFiles
                    outputs.dir destDir

                    doLast {
                        destDir.mkdirs()
                        srcFiles.getFiles().each { File file ->
                            compileTypedLuaFile(file, destDir, (String)project.splot.luajitPath)
                        }
                    }
                }

                preBuild.dependsOn(taskName)
            }
        }
    }

    void compileTypedLuaFile(File file, File destDir, String luajitPath) {
        def outFileName = tlExtPatt.matcher(file.getName()).replaceAll(/splot_lua_$1.lua/)
        def compileCommand = [ "${luajitPath}", "typedlua/tlc", "-o", "${destDir}/${outFileName}", "${file.getAbsolutePath()}"]
        println compileCommand
        String luaPath = "splot/${luaSourcesPath}/?.lua;splot/${luaSourcesPath}/?/init.lua;typedlua/?.lua;typedlua/typedlua/?.lua;;"
        Process compileProcess = compileCommand.execute(["LUA_PATH=${luaPath}"], null)
        compileProcess.in.eachLine { line -> println line }
        compileProcess.err.eachLine { line -> println line }

        def outTypedLuaPath = "${destDir}/splot_tl_${file.name}"
        new File(file.absolutePath).withInputStream { InputStream is ->
            new File(outTypedLuaPath).withOutputStream { OutputStream os ->
                def bs = new BufferedOutputStream(os)
                bs << is
            }
        }
    }
}

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId "pl.makenika.splot"
        minSdkVersion 10
        targetSdkVersion 20
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
}
